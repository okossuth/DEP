// Generated by CoffeeScript 1.6.2
define(['views/resources/ResourceBase', 'ovivo'], function(ResourceBase) {
  return ResourceBase.extend({
    common: {},
    MIN_BLOCK_HEIGHT: 100,
    tagName: 'li',
    className: 'time-group',
    template: Handlebars.templates['resourceNeedTimeGroup'],
    groupTemplate: Handlebars.templates['resourceNeedTimeGroup_group'],
    preventChangeRender: true,
    events: {
      'click': 'processClick'
    },
    processClick: function() {},
    clearScroll: function() {
      this.timeRange.style.height = '';
      if (ovivo.config.TRANSFORM !== false) {
        return this.el.style[ovivo.config.TRANSFORM] = '';
      }
    },
    processScroll: function(obj, val) {
      var _frac, _height, _val;

      _height = obj.height - this.MIN_BLOCK_HEIGHT;
      _val = Math.min(obj.height - this.MIN_BLOCK_HEIGHT, val);
      this.timeRange.style.height = "" + (obj.height - _val) + "px";
      if (obj.last === true) {
        return;
      }
      if (_val !== val) {
        _frac = (val - _val) / this.MIN_BLOCK_HEIGHT;
        this.el.style.opacity = Math.pow(1 - _frac, 2);
        this.$el.addClass('folding');
        if (ovivo.config.TRANSFORM !== false) {
          return this.el.style[ovivo.config.TRANSFORM] = "translate(0, " + (this.MIN_BLOCK_HEIGHT * _frac) + "px) scale(" + (1 - 0.05 * Math.pow(_frac, 2)) + ") rotateX(" + (60 * Math.pow(_frac, 2)) + "deg)";
        }
      } else {
        this.$el.removeClass('folding');
        this.el.style.opacity = '';
        if (ovivo.config.TRANSFORM !== false) {
          return this.el.style[ovivo.config.TRANSFORM] = '';
        }
      }
    },
    addBlock: function(block) {},
    postRender: function() {
      var _this = this;

      this.resourceNeedWeeks = this.$('.resource-needs-rows');
      this.timeRange = this.$('.time-range')[0];
      this.addResourcNeedWeeks(this.model.resourceNeedWeeks.map(function(rnw) {
        return rnw;
      }));
      this.model.resourceNeedWeeks.on('add', this.addResourcNeedWeeks, this);
      return this.renderDef.resolve();
    },
    addResourcNeedWeeks: function(rnws) {
      return this._addViewSorted(this.resourceNeedWeeks, this.model.resourceNeedWeeks, rnws);
    },
    initialize: function() {
      this.renderDef = new $.Deferred();
      this.proxyCall('initialize', arguments);
      return true;
    }
  });
});
