// Generated by CoffeeScript 1.6.2
define(['_common/ToolsBase', 'ovivo'], function(ToolsBase) {
  var _Base;

  _Base = Backbone.View.extend(_.extend({}, ToolsBase, {
    show: function() {
      this.model.trigger.apply(this.model, ['show'].concat(Array.prototype.slice.call(arguments, 0)));
      return true;
    },
    events: {
      'click .no-selection': 'clearSelection',
      'click .button-close': 'close'
    },
    clearSelection: function() {
      if (window.getSelection != null) {
        if (window.getSelection().empty != null) {
          window.getSelection().empty();
        } else if (window.getSelection().removeAllRanges != null) {
          window.getSelection().removeAllRanges();
        }
      } else if (document.selection != null) {
        document.selection.empty();
      }
      return true;
    },
    close: function() {
      return this.hideEl();
    },
    showEl: function() {
      return this.$el.removeClass('hide');
    },
    hideEl: function() {
      return this.$el.addClass('hide');
    },
    transitionStart: function() {},
    transitionComplete: function(type) {
      if (type === 'exit') {
        this.hideEl();
      }
      return true;
    },
    showSubView: function(name) {
      _.each(_.without(this.subViews, this.subViews[name]), function(subView) {
        return this.$("." + subView.name + "-only").hide();
      });
      this.processScroll.call(this.subViews[name].el);
      this.$("." + name + "-only").show();
      return this.model.set('subView', name);
    },
    subView: function() {
      return this.model.get('subView');
    },
    processSubView: function(page) {
      var _subView, _subViewName;

      _subViewName = this.subView();
      if (this.prevSubView != null) {
        this.prevSubView.hideEl();
      }
      if ((_subView = this.subViews[_subViewName]) != null) {
        _subView.showEl();
        this.trigger('subViewChange', _subViewName);
        this.prevSubView = _subView;
      }
      return true;
    },
    _initSubView: function() {
      var _subViewName;

      if ((_subViewName = this.subView()) == null) {
        this.model.set('subView', this.defaultSubView);
      } else {
        this.processSubView();
      }
      return true;
    },
    processContentScrollBind: function($el) {
      return function() {
        if ((this.scrollTop !== 0) && (this.scrolled !== true)) {
          $el.addClass('scrolled');
          this.scrolled = true;
        }
        if (this.scrollTop === 0) {
          $el.removeClass('scrolled');
          this.scrolled = false;
        }
        return true;
      };
    },
    initialize: function() {
      var _this = this;

      this.model.on('change:subView', this.processSubView, this);
      this.content = this.$('div.content');
      this.processScroll = this.processContentScrollBind(this.$el);
      this.content.on('scroll', this.processScroll);
      this.subViews = [];
      _.each(this.SubViews, function(SubView) {
        var _subView;

        _subView = new SubView();
        _this.subViews[_subView.name] = _subView;
        return _this.subViews.push(_subView);
      });
      this._initSubView();
      return true;
    }
  }));
  _Base.prototype._base = _Base;
  return _Base;
});
