// Generated by CoffeeScript 1.6.2
define(['views/calendar/DaysCollector', 'views/resources/ResourceBase', 'collections/period/ResourceNeedWeeks', 'ovivo'], function(DaysCollector, ResourceBase, ResourceNeedWeeks) {
  return ResourceBase.extend(_.extend({}, DaysCollector, {
    common: {},
    template: Handlebars.templates['calendarWeek'],
    groupTemplate: Handlebars.templates['calendarWeek_group'],
    events: {},
    days: function() {
      return this.model.days;
    },
    addBlocks: function(arr) {
      var _this = this;

      return _.each(arr, function(block) {
        return _this.addBlock(block);
      });
    },
    removeBlocks: function(arr) {
      var _this = this;

      return _.each(arr, function(block) {
        return _this.removeBlock(block);
      });
    },
    addBlock: function(block) {
      var _rn;

      _rn = this.resourceNeedWeeks.getBy('pk', block.resourceNeed().pk())[0];
      if (_rn == null) {
        _rn = this.resourceNeedWeeks.addModel({
          resourceNeed: block.resourceNeed()
        });
      }
      _rn.addBlock(block);
      return console.log('Add', block);
    },
    removeBlock: function(block) {
      var _rn;

      _rn = this.resourceNeedWeeks.getBy('pk', block.resourceNeed().pk())[0];
      if (_rn != null) {
        _rn.removeBlock(block);
      }
      return console.log('Remove', block);
    },
    _initFrame: function() {
      this.addBlocks(this.model.frame.periodBlocks.map(function(b) {
        return b;
      }));
      this.model.frame.periodBlocks.on('add', this.addBlock, this);
      this.model.frame.periodBlocks.on('remove', this.removeBlock, this);
      this.container = this.$('.resource-needs-rows');
      return this.frameInitDef.resolve();
    },
    addResourceNeed: function(model) {
      var _this = this;

      return this.frameInitDef.done(function() {
        return _this.container.append(model.view.$el);
      });
    },
    initialize: function() {
      this.frameInitDef = new $.Deferred();
      this.resourceNeedWeeks = new ResourceNeedWeeks();
      this.resourceNeedWeeks.on('add', this.addResourceNeed, this);
      this.model.on('rendered', this._initFrame, this);
      this.proxyCall('initialize', arguments);
      return true;
    }
  }));
});
