// Generated by CoffeeScript 1.6.2
define(['views/calendar/DaysCollector', 'views/resources/ResourceBase', 'collections/period/PeriodGroups', 'collections/period/GroupFilters', '_common/ToolsBase', 'ovivo'], function(DaysCollector, ResourceBase, PeriodGroups, GroupFilters, ToolsBase) {
  return ResourceBase.extend(_.extend({}, DaysCollector, {
    common: {},
    template: Handlebars.templates['calendarWeek'],
    groupTemplate: Handlebars.templates['calendarWeek_group'],
    events: {},
    processScroll: function(val, height) {
      if (this._scrollDataFlag === false) {
        this._calcScrollData();
      }
      this.el.style.top = "" + (-val) + "px";
      this.periodGroups.processScroll(val, height);
      return true;
    },
    _calcScrollData: function() {
      this.scrollerInner.height(this._offsetHeight = this.el.offsetHeight);
      this.periodGroups.calcScrollData();
      this._scrollDataFlag = true;
      return true;
    },
    days: function() {
      return this.model.days;
    },
    addBlocks: function(arr) {
      var _this = this;

      return _.each(arr, function(block) {
        return _this.addBlock(block);
      });
    },
    removeBlocks: function(arr) {
      var _this = this;

      return _.each(arr, function(block) {
        return _this.removeBlock(block);
      });
    },
    addBlock: function(block) {
      var _periodGroup;

      _periodGroup = this.periodGroups.get(block.group());
      if (_periodGroup == null) {
        _periodGroup = this.periodGroups.addModel({
          pk: block.group()
        });
      }
      return _periodGroup.addBlock(block);
    },
    removeBlock: function(block) {
      var _periodGroup;

      _periodGroup = this.periodGroups.get(block.group());
      if (_periodGroup != null) {
        return _periodGroup.removeBlock(block);
      }
    },
    _initFrame: function() {
      this.addBlocks(this.model.frame.periodBlocks.map(function(b) {
        return b;
      }));
      this.model.frame.periodBlocks.on('add', this.addBlock, this);
      this.model.frame.periodBlocks.on('remove', this.removeBlock, this);
      this.container = this.$('.period-groups');
      return this.frameInitDef.resolve();
    },
    addPeriodGroup: function(model) {
      var _this = this;

      return this.frameInitDef.done(function() {
        return _this.container.append(model.view.$el);
      });
    },
    _updateScrollThrottledRepeater: _.throttle(ToolsBase.bounceRepeater(50, 3, function() {
      this.scrollerInner.height(this._offsetHeight = this.el.offsetHeight);
      return this._scrollDataFlag = false;
    }), 100),
    _updateScroll: function() {
      if (this.model.visible) {
        return this._updateScrollThrottledRepeater();
      }
    },
    initialize: function() {
      this.frameInitDef = new $.Deferred();
      this._scrollDataFlag = false;
      this.periodGroups = new PeriodGroups();
      this.groupFilters = new GroupFilters([], {
        periodGroups: this.periodGroups
      });
      this.periodGroups.week = this;
      this.periodGroups.on('add', this.addPeriodGroup, this);
      this.periodGroups.on('add', this._updateScroll, this);
      this.periodGroups.on('remove', this._updateScroll, this);
      this.model.on('rendered', this._initFrame, this);
      this.proxyCall('initialize', arguments);
      this.model.frame.periodBlocks.on('add', this._updateScroll, this);
      this.model.frame.periodBlocks.on('remove', this._updateScroll, this);
      this.model.frame.periodBlocks.on('updateScroll', this._updateScroll, this);
      this.scroller = $('.page.page-calendar .scroller');
      this.scrollerInner = $('.page.page-calendar .scroller .inner');
      return true;
    }
  }));
});
