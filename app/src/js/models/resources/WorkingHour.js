// Generated by CoffeeScript 1.6.2
define(['models/resources/ResourceBase', 'views/resources/WorkingHour', 'ovivo'], function(ResourceBase, View) {
  return ResourceBase.extend({
    _gettersNames: ['weekdays', 'available', 'repeat', 'exclusions', 'groups', 'start_date', 'end_date', 'start_time', 'end_time', 'pk'],
    _getTrueHash: function(hash) {
      return _.compact(_.map(_.pairs(hash), function(arr) {
        if (arr[1] === true) {
          return arr[0];
        } else {
          return void 0;
        }
      }));
    },
    processWeek: function(num, value) {
      var _weeks;

      value = !value;
      this.weekdaysHash[num] = value;
      _weeks = this._getTrueHash(this.weekdaysHash);
      this.set('weekdays', _weeks.length > 0 ? _weeks.join(',') : null);
      return true;
    },
    processGroup: function(pk, value) {
      var _groups;

      value = !value;
      this.groupsHash[pk] = value;
      _groups = this._getTrueHash(this.groupsHash);
      this.set('groups', _.map(_groups, function(group) {
        return parseInt(group);
      }));
      return true;
    },
    groups: function() {
      var _groups;

      if ((_groups = this.get('groups')) != null) {
        return _groups;
      } else {
        return [];
      }
    },
    validate: function(attrs) {
      if ((attrs.available != null) && (attrs.start_date != null) && (attrs.start_time != null) && (attrs.end_time != null) && (attrs.weekdays != null) && attrs.repeat) {
        return void 0;
      } else {
        return gettext('Params are missing');
      }
    },
    processChange: function() {
      if (this.id != null) {
        return this.save();
      }
    },
    toJSON: function() {
      var _json;

      _json = Backbone.Model.prototype.toJSON.call(this);
      if ((_json.groups instanceof Array) && (_json.groups.length === 0)) {
        this.set('groups', null, {
          silent: true
        });
        _json.groups = null;
      }
      delete _json.exclusions;
      return _json;
    },
    initialize: function(attrs, options) {
      var _ref;

      this.View = View;
      this.proxyCall('initialize', arguments);
      this.on('change', this.processChange, this);
      this.on('change:group', this.processChange, this);
      this.groupsHash = _.reduce(this.groups(), (function(memo, elem) {
        memo[elem] = true;
        return memo;
      }), {});
      this.weekdaysHash = _.reduce((_ref = this.weekdays()) != null ? _ref.split(',') : void 0, (function(memo, elem) {
        memo[elem] = true;
        return memo;
      }), {});
      return true;
    }
  });
});
